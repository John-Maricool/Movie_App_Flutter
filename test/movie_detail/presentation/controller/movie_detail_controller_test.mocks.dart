// Mocks generated by Mockito 5.4.0 from annotations
// in movie_app/test/movie_detail/presentation/controller/movie_detail_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:either_dart/either.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_app/core/failure/failure.dart' as _i4;
import 'package:movie_app/core/result/result.dart' as _i5;
import 'package:movie_app/movie_detail/data/model/cast.dart' as _i7;
import 'package:movie_app/movie_detail/data/model/movie_detail.dart' as _i6;
import 'package:movie_app/movie_detail/data/model/video.dart' as _i8;

import 'movie_detail_controller_test.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MovieDetailUsecaseTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailUsecaseTest extends _i1.Mock
    implements _i2.MovieDetailUsecaseTest {
  MockMovieDetailUsecaseTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic getMovieDetail(
    int? id,
    dynamic Function(_i3.Either<_i4.Failure, _i5.Result<_i6.MovieDetail>>)? res,
  ) =>
      super.noSuchMethod(Invocation.method(
        #getMovieDetail,
        [
          id,
          res,
        ],
      ));
  @override
  dynamic getMovieCasts(
    int? id,
    dynamic Function(_i3.Either<_i4.Failure, _i5.Result<List<_i7.Cast>>>)? res,
  ) =>
      super.noSuchMethod(Invocation.method(
        #getMovieCasts,
        [
          id,
          res,
        ],
      ));
  @override
  dynamic getMovieVideos(
    int? id,
    dynamic Function(_i3.Either<_i4.Failure, _i5.Result<List<_i8.Video>>>)? res,
  ) =>
      super.noSuchMethod(Invocation.method(
        #getMovieVideos,
        [
          id,
          res,
        ],
      ));
}
